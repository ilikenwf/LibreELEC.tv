From 6ad0f7b69ee0240651d31174a1df93e16b9c7f36 Mon Sep 17 00:00:00 2001
From: "charles.park" <charles.park@hardkernel.com>
Date: Thu, 11 Feb 2016 15:21:14 +0900
Subject: [PATCH] ODROID-C2: i2cdetect error fix

Change-Id: Ibdd6c6a69045d669859fafef172a7ed4034711ba
---
 drivers/amlogic/i2c/aml_i2c.c | 39 +++++++++++++++++++++++++++++----------
 1 file changed, 29 insertions(+), 10 deletions(-)

diff --git a/drivers/amlogic/i2c/aml_i2c.c b/drivers/amlogic/i2c/aml_i2c.c
index 5e99fa825329b..1b7cefb57776b 100644
--- a/drivers/amlogic/i2c/aml_i2c.c
+++ b/drivers/amlogic/i2c/aml_i2c.c
@@ -244,6 +244,15 @@ static void aml_i2c_xfer_prepare(struct aml_i2c *i2c, unsigned int speed)
 
 static void aml_i2c_start_token_xfer(struct aml_i2c *i2c)
 {
+	struct aml_i2c_reg_ctrl *ctrl =
+		(struct aml_i2c_reg_ctrl *)&(i2c->master_regs->i2c_ctrl);
+
+	if (ctrl->manual_en || ctrl->ack_ignore)	{
+		dev_err(&i2c->adap.dev, "Controller Error! manual_en = %d, ack_ignore = %d\n",
+				ctrl->manual_en, ctrl->ack_ignore);
+		/* Controller Error Fix. */
+		ctrl->manual_en = 0;	ctrl->ack_ignore = 0;
+	}
 	aml_i2c_dump(i2c);
 	i2c->master_regs->i2c_ctrl &= ~1;	/*clear*/
 	i2c->master_regs->i2c_ctrl |= 1;	/*set*/
@@ -351,12 +360,19 @@ static ssize_t aml_i2c_write(struct aml_i2c *i2c, unsigned char *buf,
 	int ret;
 	size_t wr_len;
 	int tagnum = 0;
-	if (!buf || !len)
+	if (!buf)
 		return -EINVAL;
 	aml_i2c_clear_token_list(i2c);
 	if (!(i2c->msg_flags & I2C_M_NOSTART)) {
 		i2c->token_tag[tagnum++] = TOKEN_START;
 		i2c->token_tag[tagnum++] = TOKEN_SLAVE_ADDR_WRITE;
+
+		if (!len)	{
+			i2c->token_tag[tagnum++] = TOKEN_STOP;
+			aml_i2c_set_token_list(i2c);
+			aml_i2c_start_token_xfer(i2c);
+			return	aml_i2c_wait_ack(i2c);
+		}
 	}
 	while (len) {
 		wr_len = min_t(size_t, len, AML_I2C_MAX_TOKENS-tagnum);
@@ -599,9 +615,8 @@ static int aml_i2c_xfer(struct i2c_adapter *i2c_adap, struct i2c_msg *msgs,
 			i2c->msg_flags = p->flags;
 			aml_i2c_dbg(i2c, "msg%d: addr=0x%x, flag=0x%x, len=%d\n",
 						i, p->addr, p->flags, p->len);
-			ret = i2c->ops->do_address(i2c, p->addr);
-			if (ret || !p->len)
-				continue;
+			i2c->ops->do_address(i2c, p->addr);
+
 			if (p->flags & I2C_M_RD)
 				ret = i2c->ops->read(i2c, p->buf, p->len);
 			else
@@ -621,10 +636,10 @@ static int aml_i2c_xfer(struct i2c_adapter *i2c_adap, struct i2c_msg *msgs,
 			gpiod_direction_output(i2c->i2c_gdesc, !i);
 		}
 #endif
-		dev_err(&i2c_adap->dev,
+		aml_i2c_dbg(i2c,
 			"[aml_i2c_xfer] error ret = %d (%s)",
 			ret, ret == -EIO ? "-EIO" : "-ETIMEOUT");
-		dev_err(&i2c_adap->dev,
+		aml_i2c_dbg(i2c,
 			"token %d, master_no(%d) %dK addr 0x%x\n",
 			i2c->cur_token, i2c->master_no,
 			i2c->master_i2c_speed/1000,
@@ -823,14 +838,18 @@ static ssize_t store_aml_i2c(struct class *class,
 			break;
 		/* pr_info("argv[%d]=%s\n", argn, argv[argn]); */
 	}
+
 	status = kstrtol(argv[0], 0, &value);
 	if (status == 0)
 		val = (unsigned int)value;
 	val = argn ? val : 0;
-	status = kstrtol(argv[1], 0, &value);
-	if (status == 0)
-		val2 = (unsigned int)value;
-	val2 = (argn > 1) ? val2 : 0;
+
+	if (argn > 1)	{
+		status = kstrtol(argv[1], 0, &value);
+		val2 = (status == 0) ? (unsigned int)value : 0;
+	} else {
+		val2 = 0;
+	}
 
 	if (!strcmp(attr->attr.name, "speed")) {
 		mutex_lock(i2c->lock);
